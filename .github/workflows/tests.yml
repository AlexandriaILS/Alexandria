name: Tests

on:
  pull_request:
    types:
      - opened
      - synchronize

jobs:
  Tests:
    runs-on: ubuntu-latest

    # runs all of the steps inside the specified container rather than on the VM host.
    # Because of this the network configuration changes from host based network to a container network.
    container:
      image:  python:3.10-buster

    services:
      postgres:
        image: postgres:14.2
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: asdf
          POSTGRES_DB: alexandria
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Install psql
      run: |
        apt-get update
        apt-get install --yes --no-install-recommends postgresql-client
    - name: Configure Postgres
      # need to connect to hostname postgres because that's the name of the container
      run: |
        PGPASSWORD="asdf" psql -h postgres -U postgres -d template1 -c 'CREATE EXTENSION pg_trgm;'
        PGPASSWORD="asdf" psql -h postgres -U postgres -c "create user alexandria with superuser password 'asdf';grant all on database alexandria to alexandria;"
    - name: Checkout current branch
      uses: actions/checkout@v2
    - uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
    - name: Install Dependencies
      run: |
        sudo apt-get install libjpeg8 libjpeg-dev libpng-dev libpq-dev -y
        poetry install
    - name: Run Tests
      run: |
        poetry run pytest --workers 4
      env:
        # use postgres for the host here because we have specified a container for the job.
        # If we were running the job on the VM this would be localhost
        POSTGRES_HOST: postgres
        POSTGRES_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
    - name: Set coverage amount
      id: vars
      run: echo ::set-output name=coverage_percent::$(poetry run coverage report | grep "%" | tail -1 | awk '{print $4}')
    - name: 'Comment the coverage amount.'
      uses: actions/github-script@0.3.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { issue: { number: issue_number }, repo: { owner, repo }  } = context;
          github.issues.createComment({ issue_number, owner, repo, body: 'Current coverage: ${{ steps.vars.outputs.coverage_percent }}' });
      continue-on-error: true
