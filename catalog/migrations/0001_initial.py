# Generated by Django 3.1.5 on 2021-02-06 03:47

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("taggit", "0003_taggeditem_add_unique_index"),
        ("users", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("can_circulate", models.BooleanField(default=True)),
                (
                    "home",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.branchlocation",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="MediaType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="Record",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=26021)),
                ("authors", models.CharField(max_length=500)),
                ("subtitle", models.CharField(blank=True, max_length=26021, null=True)),
                (
                    "uniform_title",
                    models.CharField(blank=True, max_length=26021, null=True),
                ),
                ("notes", models.TextField(blank=True, null=True)),
                ("series", models.TextField(blank=True, null=True)),
                (
                    "subjects",
                    models.ManyToManyField(
                        blank=True,
                        to="catalog.Subject",
                        verbose_name="list of subjects",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="A comma-separated list of tags.",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Item",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("barcode", models.CharField(max_length=50, verbose_name="barcode")),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2, max_digits=7, verbose_name="price"
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("new", "New"),
                            ("fine", "Fine"),
                            ("vygd", "Very Good"),
                            ("good", "Good"),
                            ("fair", "Fair"),
                            ("poor", "Poor"),
                        ],
                        default="new",
                        max_length=4,
                        null=True,
                        verbose_name="condition",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this piece of media is counted as part of the collection.",
                        verbose_name="active",
                    ),
                ),
                (
                    "isbn",
                    models.CharField(
                        blank=True, max_length=13, null=True, verbose_name="ISBN"
                    ),
                ),
                (
                    "issn",
                    models.CharField(
                        blank=True, max_length=8, null=True, verbose_name="ISSN"
                    ),
                ),
                (
                    "issn_title",
                    models.TextField(blank=True, null=True, verbose_name="issn_title"),
                ),
                (
                    "marc_location",
                    models.TextField(
                        blank=True, null=True, verbose_name="marc_location"
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "call_number",
                    models.CharField(max_length=100, verbose_name="call_number"),
                ),
                (
                    "checkout_count",
                    models.IntegerField(default=0, verbose_name="checkout_count"),
                ),
                (
                    "sudoc",
                    models.CharField(
                        blank=True, max_length=30, null=True, verbose_name="sudoc"
                    ),
                ),
                (
                    "last_checked_out",
                    models.DateTimeField(
                        blank=None, null=True, verbose_name="last_checked_out"
                    ),
                ),
                (
                    "can_circulate",
                    models.BooleanField(default=True, verbose_name="can_circulate"),
                ),
                (
                    "notes",
                    models.TextField(blank=True, null=True, verbose_name="notes"),
                ),
                (
                    "physical_description",
                    models.CharField(
                        blank=True,
                        max_length=500,
                        null=True,
                        verbose_name="physical_description",
                    ),
                ),
                (
                    "publisher",
                    models.CharField(max_length=500, verbose_name="publisher"),
                ),
                (
                    "pubyear",
                    models.IntegerField(blank=True, null=True, verbose_name="pubyear"),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="catalog.collection",
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "home_location",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="users.branchlocation",
                    ),
                ),
                (
                    "record",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="catalog.record"
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="catalog.mediatype",
                        verbose_name="item type",
                    ),
                ),
            ],
        ),
    ]
