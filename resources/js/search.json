[[{"l":"AlexandriaILS","p":["Alexandria is an Integrated Library System (ILS) that aims to be a free and open source replacement for the suffocatingly expensive software that many libraries are forced to take on. The goal of the project is to be able to perform all the day-to-day management duties that any small to medium-sized library might need while doing it as unobtrusively and quickly as possible. Built with longevity and maintainability in mind, Alexandria lets you put your library funds where they matter: serving your patrons.","Without libraries what have we? We have no past and no future. — Ray Bradbury"]},{"l":"Features","p":["Click on each of the below sections to get more details.","The catalog is the heart and soul of any ILS - making sure that your patrons can access it and easily obtain the materials they need is critical. Patrons also have access to see their checkouts, limited account settings, due dates, holds, and fines & fees. (In case you're wondering, yes, you can disable fines for your library.)","Desktops and laptops aren't the only devices that can access the internet, and so it's not much of a logical leap to say \"let's make it all work on mobile\"! The catalog, management, and business sides of the app are all mobile friendly, so you can so whatever you need to do on the go.","Edit items, records, or holds as needed to keep your collection as clean as can be! Add new items of existing records or create new ones easily through our staff panel. Importing, modifying, and exporting MARC records is almost easier done than said - you can also import and export catalog information to the shared repository of all libraries using Alexandria for others to save a little work!","Create and edit patrons, handle fines and fees, and easily perform actions on their behalf to keep your library running smoothly. Per ALA guidelines, no checkout history is preserved after books are returned and the bare minimum of information is collected.","Generate whatever report you need, from financial data to daily pull lists to collection weeding, through our easy-to-use report tooling. Lockable to different permission levels, you can make sure that the right information is available to all staff at any time and that everyone has immediate access to the data they need.","Collecting fines or selling materials isn't always everyone's idea of fun, but we make it easy to get started by including a fully functional Stripe integration in the box - just put in the API keys and go! If you're a government entity or have a centralized payment system, you can easily hook into your payment system with a little bit of Python code and our extendable payment system.","This section also supports functionality that can be used for book sales or a small gift shop, allowing for easily keeping all the records under one data roof.","Not every library stands on its own; sometimes we band together for the good of all. Tie multiple instances of Alexandria together to share collections (or even just a collection or two) with other libraries.","As part of the open source goal of the project, you are free to take this software and use it for your library! No fees, no charges, no nothing. Nada, zip, zilch.","If you can't (or don't want to, we wouldn't blame you) want to host it yourself, there is a cloud plan available that only requires a setup fee (to import your catalog, patrons, and other data) and a nominal monthly fee to keep everything going with backups.","Open Source doesn't mean that you can host it and charge other people for access. The source code is open, but the license is as strict as we can make it while still allowing the folks who need it (libraries) to have open access. You are welcome to use it for your own library, but please contact us for hosting if you'd like someone else to handle the details."]},{"i":"why","l":"Why?"},{"l":"No-to-Low Cost","p":["Running a library is expensive, especially for small ones with only a handful of staff members. There are a lot of moving parts, and oftentimes each moving part comes with its own hefty price tag and a different vendor contract. The ILS (or in some cases, the many individual parts which may or may not work well together) is the heart of the library, but the very existence of a library is antithetical to making you pay out the nose for the software you functionally require. Free solutions often come with the cost of usability, and we don't want you to be stuck between blowing your budget on something pretty or a free option that's impossible to use.","We hope that Alexandria is the best of both worlds -- free, pretty, and easy to use.","There's no vendor lock-in here, and the only contracts here are optional support or cloud hosting; otherwise, it's 100% free."]},{"l":"A Simple Solution","p":["\"Simple\" is almost a misnomer when talking about something this complicated, but what we mean is that we've worked with librarians and patrons to find the functionality that you need without extra bells and whistles that may look cool but, ultimately, are schlock.","That said, not every feature or default configuration works for every organization; we have lots of settings so that you can set up your library with exactly what you need without overwhelming staff or patrons. (And maybe there's something that you still need that we haven't addressed! If that's so, open an issue and let's work together to get that functionality implemented!)"]},{"l":"Privacy First","p":["There is no reason to collect more information about patrons than is strictly necessary, so... we don't.","Alexandria is built from the ground up using ALA's Privacy Checklist for ILS' as a guide, and patron privacy is paramount. We store the absolute minimum that is required; no tracking, no history, no nothing. Data that doesn't exist can't be weaponized."]},{"l":"Ease of Use","p":["Alexandria is a web-based platform designed for easy navigation, access from anywhere, and usable by patrons and staff alike regardless of technological skill or knowledge. Our platform is built with accessibility in mind and follows the current WCAG Accessibility guidelines and is natively usable with tooling like screen readers or custom fonts. Staff both behind the desk or in the stacks have access to the same tools using whatever device they have on hand, and mobile-friendly design means that what works on one device will work on another.","Alexandria straddles the middle ground between configurability and usability. A clean interface greets every user, giving patrons the information and access they need while giving librarians the power they need to keep the doors open."]}],[{"l":"Development","p":["Looking to help us out? Take a look at the documentation in this section to get started. If you've got a question that we don't have an easy answer for, let's figure it out together and make sure we get it added here!","Getting Started"]}],[{"l":"Getting Started","p":["Going from nothing to 'up and running' doesn't take a lot, but it might take a few minutes! There are only a few things that you'll need to do."]},{"l":"Local Setup","p":["You will need:","make","git","python3.10+","poetry","Docker (Probably. More on that later.)","If you don't already have a modern version of Python installed, we recommend using pyenv to handle installing the appropriate Python version. Here's some example commands to get you started:"]},{"l":"The App","p":["Alexandria can be found on GitHub here. Now that you have Poetry set up, we can clone the repository to your local machine and get dependencies installed.","This assumes you have ssh authentication configured in GitHub. See here for more info.","Create a file at the root of the repository called local_settings.py. This is where you'll put any settings overrides while you're working on the app; it's also required to even run in debug mode. Copy the below into your new file:"]},{"l":"Database Operations","p":["Alexandria requires PostgreSQL, a free and open source database, to function. We rely heavily on the fantastic features provided, so you will need to have an instance of Postgres running before you can bring up Alexandria locally. This is easiest if you have Docker installed -- here are instructions for Ubuntu and WSL2 or MacOS.","Before continuing, make sure you can access docker by running docker version(without sudo!). It should print out two sections: one about the Client and one about the Server. If you only see the block about the Client and you get an error about the Server section (usually something like \"cannot connect to docker client -- is it running?\") then check the following:","make sure the server is running","if sudo docker version works, you need to fix your permissions","Add your user to the docker group by running the following command in your terminal:","You can then either log out and log back in OR force the changes to take effect immediately by running this:","Verify that you see the docker group listed for your account by running:","It should look something like this:","All the initial setup commands are built into the Makefile, so just run the following to get set up:","Get a notice about not being able to import Django? Make sure that you've run poetry shell and that you've installed the dependencies first!","The migrate command will set up the database to accept data and the dev_data command will create all the information needed for you to start working on the system. The default admin login is:","username: 1234 password: asdf","Run make run to start the development server -- you should be able to access the site on http://localhost:8000! You can bring the database down separately at any time by running make db_down.","If you need to completely reset your database, run make clean. ⚠️ THIS WILL DELETE ALL YOUR DATA IN POSTGRES. ⚠️"]},{"l":"Install PostgreSQL on your local machine","p":["As a reminder, you don't need to do this if you take the Docker route; we recommend the docker method over this one, as this will leave Postgres running locally on your machine after you're finished working with Alexandria and you may not want or need that. If you still want to run Postgres locally (and not involve Docker), then read on.","The first thing you'll need to do is install a new version of PostgreSQL that works for your operating system. After that's done, there's a little bit of setup that needs to happen:","Activate the Postgres shell using psql:","After that, you should land at a shell that looks like this:","Run the following commands in your new shell to configure the database:","Make sure to end every command with a semicolon (;) AND press Enter when you're done to execute the command. The shell will print out the name of the command that you just ran (for example, after you run the first \"CREATE DATABASE\" command, it should print \"CREATE\") back into the console. That's how you know the command just ran. If you don't see that line, try typing a semicolon and pressing enter again; usually that line terminator just got misplaced.","If everything ran correctly, you should see the following responses to your commands:","After that's done, go ahead and run make db_setup-- that should try to connect to the db and verify that everything's working. If the command finishes, then Alexandria can talk to your install!","Run make migrate to push the db schema and then finally make run to start Alexandria -- at this point you're off to the races!"]}]]