[[{"l":"AlexandriaILS","p":["Alexandria is an Integrated Library System (ILS) that aims to be a free and open source replacement for the suffocatingly expensive software that many libraries are forced to take on. The goal of the project is to be able to perform all the day-to-day management duties that any small to medium-sized library might need while doing it as unobtrusively and quickly as possible. Built with longevity and maintainability in mind, Alexandria lets you put your library funds where they matter: serving your patrons.","Without libraries what have we? We have no past and no future. — Ray Bradbury"]},{"l":"Features","p":["Click on each of the below sections to get more details.","The catalog is the heart and soul of any ILS - making sure that your patrons can access it and easily obtain the materials they need is critical. Patrons also have access to see their checkouts, limited account settings, due dates, holds, and fines & fees. (In case you're wondering, yes, you can disable fines for your library!)","Desktops and laptops aren't the only devices that can access the internet, and so it's not much of a logical leap to say \"let's make it all work on mobile\"! The catalog, management, and business sides of the app are all mobile friendly, so you can do whatever you need to do on the go.","Edit items, records, or holds as needed to keep your collection as clean as can be! Add new items of existing records or create new ones easily through our staff panel. Importing, modifying, and exporting MARC records is almost easier done than said - you can also import and export catalog information to the shared repository of all libraries using Alexandria for others to save a little work!","Create and edit patrons, handle fines and fees, and easily perform actions on their behalf to keep your library running smoothly. Per ALA guidelines, no checkout history is preserved after books are returned and the bare minimum of information is collected.","Generate whatever report you need, from financial data to daily pull lists to collection weeding, through our easy-to-use report tooling. Lockable to different permission levels, you can make sure that the right information is available to all staff at any time and that everyone has immediate access to the data they need.","Collecting fines or selling materials isn't always everyone's idea of fun, but we make it easy to get started by including a fully functional Stripe integration in the box - just put in the API keys and go! If you're a government entity or have a centralized payment system, you can easily hook into your payment system with a little bit of Python code and our extendable payment system.","This section also supports functionality that can be used for book sales or a small gift shop, allowing for easily keeping all the records under one data roof.","Not every library stands on its own; sometimes we band together for the good of all. Tie multiple instances of Alexandria together to share collections (or even just a collection or two) with other libraries.","As part of the open source goal of the project, you are free to take this software and use it for your library! No fees, no charges, no nothing. Nada, zip, zilch.","If you can't (or don't want to, we wouldn't blame you) want to host it yourself, there is a cloud plan available that only requires a setup fee (to import your catalog, patrons, and other data) and a nominal monthly fee to keep everything going with backups.","Open Source doesn't mean that you can host it and charge other people for access. The source code is open, but the license is as strict as we can make it while still allowing the folks who need it (libraries) to have open access. You are welcome to use it for your own library, but please contact us for hosting if you'd like someone else to handle the details."]},{"i":"why","l":"Why?"},{"l":"No-to-Low Cost","p":["Running a library is expensive, especially for small ones with only a handful of staff members. There are a lot of moving parts, and oftentimes each moving part comes with its own hefty price tag and a different vendor contract. The ILS (or in some cases, the many individual parts which may or may not work well together) is the heart of the library, but the very existence of a library is antithetical to making you pay out the nose for the software you functionally require. Free solutions often come with the cost of usability, and we don't want you to be stuck between blowing your budget on something pretty or a free option that's impossible to use.","We hope that Alexandria is the best of both worlds -- free, pretty, and easy to use.","There's no vendor lock-in here, and the only contracts are optional support or cloud hosting; otherwise, it's 100% free."]},{"l":"A Simple Solution","p":["\"Simple\" is almost a misnomer when talking about something this complicated, but what we mean is that we've worked with librarians and patrons to find the functionality that you need without extra bells and whistles that may look cool but, ultimately, are schlock.","That said, not every feature or default configuration works for every organization; we have lots of settings so that you can set up your library with exactly what you need without overwhelming staff or patrons. (And maybe there's something that you still need that we haven't addressed! If that's so, open an issue and let's work together to get that functionality implemented!)"]},{"l":"Privacy First","p":["There is no reason to collect more information about patrons than is strictly necessary, so... we don't.","Alexandria is built from the ground up using ALA's Privacy Checklist for ILS' as a guide, and patron privacy is paramount. We store the absolute minimum that is required; no tracking, no history, no nothing. Data that doesn't exist can't be weaponized."]},{"l":"Ease of Use","p":["Alexandria is a web-based platform designed for easy navigation, access from anywhere, and usable by patrons and staff alike regardless of technological skill or knowledge. Our platform is built with accessibility in mind and follows the current WCAG Accessibility guidelines and is natively usable with tooling like screen readers or custom fonts. Staff both behind the desk or in the stacks have access to the same tools using whatever device they have on hand, and mobile-friendly design means that what works on one device will work on another.","Alexandria straddles the middle ground between configurability and usability. A clean interface greets every user, giving patrons the information and access they need while giving librarians the power they need to keep the doors open."]}],[{"l":"Running Alexandria","p":["When deploying your own instance of Alexandria, there are a number of things you might need to know or reference as you go. This documentation is under construction, but if there's a missing page that you need then please let us know on GitHub.","The pages in this section cover how to deploy Alexandria to production for your library."]}],[{"l":"Configuring Alexandria","p":["When configuring your own instance of Alexandria, there are a number of things you might need to know or reference as you go. This documentation is under construction, but if there's a missing page that you need then please let us know on GitHub.","The pages in this section cover how to update the settings for Alexandria for your library, custom edits you can make to the codebase to make it work better for you, and more!","Configuring Receipts"]}],[{"l":"Custom Receipts"},{"l":"Introduction","p":["Alexandria is configured out of the box to use the Epson TM-T88V receipt printer, mostly because that's what we have on hand to work with. If you have a different type of receipt printer, then you may want to adjust the receipts that come with Alexandria to work better for your printers.","Receipt printing will ONLY work with Alexandria Desktop, the companion staff application. Receipts are the only part of Alexandria that cannot be done through your web browser. You can go through processes that would generate a receipt (like check out or check in) through your browser, but a receipt will not print."]},{"l":"Prerequisites","p":["A running installation of Alexandria","Staff application configured and running"]},{"l":"Editing Receipts","p":["TBD"]}],[{"l":"Contributing Code","p":["Looking to help us out? Welcome! Let's get you set up to work on our stuff.","If you're wanting to work on the codebase itself, you'll need to get an environment set up on your computer. Head over to Environment Setup to get started.","If documentation is your goal, go to Documentation to learn how to edit our docs!","If you've got a question that we don't have an easy answer for, let's figure it out together and make sure we get it added here!"]}],[{"l":"Environment Setup"},{"l":"Introduction","p":["In order to work on Alexandria, you will need to set up your local environment. In this page, you will install and configure pyenv, Python, and Poetry, the three tools you need to work on Alexandria on your computer.","Alexandria uses several features that are not available on Windows. If you are using a Windows computer, you will need to install and configure WSL2 to get a version of Ubuntu Linux working on your machine. You won't be able to work on / use Alexandria normally without it, so go ahead and get that installed and working before continuing. All commands shown will need to be run inside WSL2.","If your computer is running MacOS or Linux as its operating system (these docs assume Ubuntu / Debian Linux) then you're already good to go. Any other version of Linux is probably fine as well, but it's up to you to translate the requirements to your distro."]},{"l":"Prerequisites","p":["A computer running MacOS, Ubuntu, or Windows with WSL2 (Ubuntu)","Docker as configured by following steps one and two from this tutorial for Ubuntu 22.04 or by following this tutorial for MacOS","If you're on MacOS, you will need homebrew to install some of the dependencies","Can't use Docker? Environment Setup"]},{"l":"Installing Pyenv and Python"},{"l":"Pyenv","p":["Most computers already have Python installed, but we want to make sure that we're using the proper version and modifying the version that comes with your computer can cause serious unexpected problems. To get around that, we recommend using pyenv, a version manager for Python.","In your terminal application, start by installing some prerequisite packages which will allow the next steps to run."]},{"i":"ubuntu--wsl2","l":"Ubuntu / WSL2"},{"l":"MacOS","p":["Now you'll install pyenv and ensure that it's working.","Now that it's installed, restart your terminal shell (the command line interface) so that it picks up the changes:","Want to know more or run into issues? Take a look at the pyenv-installer documentation here!","Check to make sure that your shell has pyenv installed and active:","You should see something like this, although the version number will likely be different:"]},{"l":"Python","p":["Now that pyenv is installed, we can safely install any version of Python we want without worry and can also easily change versions later if we need to.","List all the versions of Python available by running the following in your terminal -- be warned that there will be a lot of results!","Scroll up in the list until you find lines that are just numbers -- they'll look like this:","Make a note of the version that is the highest number without letters or hyphens in it. At the time of this writing, the highest number is 3.10.4.","Install that version of Python with pyenv with the following command:","This will take a little bit. Stretch your limbs and grab some water while we wait for that to run \uD83D\uDE04","Alright! Now that it's installed, we'll set it as the default version for your computer -- don't worry, your system version of Python (if you have one) isn't going anywhere -- this will just change which version of Python is run when you just ask for \"python\" instead of a specific version.","First we'll check to make sure it's installed and visible:","You should see something like this (again, with the version that you just installed instead of my version):","See that asterisk next to system? That means that the version of Python that's currently installed is set as the default. We'll change that now to your version:","Now you should be done -- check the version of Python that your shell gets by running:","It should return something like this:"]},{"l":"Poetry","p":["Alexandria (and the other applications that surround it) uses Poetry as its dependency manager. We'll install it now.","Because we installed the latest version of Python 3 above and set it to the global version with pyenv, Poetry will install automatically using the version we just installed.","Now we need to tell your shell how to find it. Because there many different terminal shells that you might be running, the shell that you have determines how we do the next step. To find out what shell you have, run:","It should print out the name of the shell you're using now. Mine may be different than yours, but the output should look like this:","...so the shell that I'm running (and, most likely, you as well) is zsh. Once you've identified your shell, you can tell it where to find Poetry:","If your shell is different from one of the two listed above (like fish) then you will likely know where to add the PATH addition.","Restart your shell again by running:","Verify that Poetry can be found by asking for its version:","Though the version number may be different, you should see something like the following:","Congrats, you've installed pyenv, the latest version of Python, and Poetry; you're ready to set up Alexandria!"]}],[{"l":"Getting It Running"},{"l":"Introduction","p":["In this page, you will use the tooling you installed from the previous page to get Alexandria and its dependencies installed on your computer."]},{"l":"Prerequisites","p":["Getting It Running","SSH authentication configured with GitHub ( See here for instructions.)","A text / code editor (don't have one? VS Code is a great place to start!)"]},{"l":"The App","p":["We'll start by cloning the repository to your machine in your home directory.","Once that completes, cd(change directory) into the new folder:","Now we're inside the project directory. Since we installed Poetry earlier, we can use it to install the dependencies for Alexandria. This will take a minute or two.","Activate our new Python environment:","Create a new file here called local_settings.py-- you'll use this to override any settings you need while working on Alexandria. More on that later!","Open the file in your preferred editor and paste the following lines into it as your starting point:","Any setting specified here will override the setting in alexandria/settings/base.py without having to change anything in that file! It's a great way to test whatever you want without having to worry about undoing your changes."]},{"l":"The Database","p":["Add your user to the docker group by running the following command in your terminal:","Alexandria requires PostgreSQL, a free and open source database, to function. We rely heavily on the fantastic features provided, so you will need to have an instance of Postgres running before you can bring up Alexandria locally. We use Docker to make it easily accessible and controllable.","All the initial setup commands are built into the Makefile, so download and start the Postgres Docker image:","Before continuing, make sure you can access docker by running docker version(without sudo!). It should print out two sections: one about the Client and one about the Server. If you only see the block about the Client and you get an error about the Server section (usually something like \"cannot connect to docker client -- is it running?\") then check the following:","Congratulations! You now have a local copy of Alexandria and a running database ready to interact with! Go to the next page to learn how to interact with your new install.","Docker is controlled through Docker Desktop for Mac, so if it's currently running, close the software. Then start the program again from Applications.","Get a notice about not being able to import Django? Make sure that you've run poetry shell and that you've installed the dependencies first!","if sudo docker version works, you need to fix your permissions (see below)","It should look something like this:","make sure the server is running","Now that it's set up, write our database schema to it by running:","Once it finishes, set up the database by running the configuration command:","Since we're doing this for development purposes, now the database is ready for writing actual data. Alexandria includes all 67,000 titles currently on Project Gutenberg and we use these titles as our test data. Run the below command to import all the data:","Start it by running the following command:","Verify that you see the docker group listed for your account by running:","WSL2, despite running Ubuntu, still runs a version of Ubuntu, and this is one of the times that it differs from the full OS. Start the server by running:","You can then either log out and log back in OR force the changes to take effect immediately by running this:","You should get something like the following as a response:"]}],[{"l":"Using Alexandria Locally"},{"l":"Introduction","p":["Now that you have everything installed and working, in this page we'll cover how to interact with Alexandria from the command line and all the common commands that you might need."]},{"l":"Prerequisites","p":["Using Alexandria Locally Using Alexandria Locally"]},{"l":"Interacting with Alexandria","p":["Start by bringing up the database; you will always need to have PosgreSQL running before running Alexandria.","Once that completes, we're ready to start Alexandria.","This will start the local server running at http://localhost:8000/. If you load that page now, you should see logs start to fill your terminal screen. If you change any code, the server will automatically reload in your terminal. Wait a moment, refresh the page in your web browsers, and you'll be running the new version of the code!","Did you get a long error that has django.db.utils.OperationalError: at the end? Make sure the database is running from the previous step: make db_up!","The default admin login is:","username: 1234 password: asdf","Stop Alexandria in your terminal by pressing CTRL+C.","If you're done working and need to bring down the database, you can do so with:"]},{"l":"Resetting the Database","p":["➡️ THIS WILL DELETE ALL YOUR DATA IN POSTGRES.⬅️","Do not do this unless you actually want to reset your database!","To reset your data, run the following command:","This removes all the data in Postgres and leaves it empty. If you're doing development work, you will need to repopulate the database with the development data again by running:"]},{"l":"Testing Alexandria","p":["Tests make sure that we don't break existing functionality while working on new features and make sure that new features work the way they're supposed to! If you just want to run the tests directly, make sure that the Python environment is activated ( poetry shell) and run the following:","You can run a specific file of tests (or a group of tests) by specifying the folder for pytest to check:","If you want to run all the tests the fast way, run:"]},{"l":"Launching the Docs Server","p":["If you want to work on the documentation (these pages!) then you will need to install Retype-- more information at the below link.","Using Alexandria Locally","After Retype is installed, run the Retype server by running the following:"]},{"l":"Interacting with Alexandria on the Command Line","p":["Sometimes you need to access Alexandria or the database directly; you can do so with the below commands.","Access Alexandria's command line:","Open the database ( psql) command line:","Congratulations! You now have all the commands and resources you need to work on Alexandria locally."]}],[{"l":"Local PostgreSQL Install"},{"l":"Introduction","p":["➡️ This method is not supported.⬅️","Activate the Postgres shell using psql:","After that, you should land at a shell that looks like this:","After that's done, go ahead and run make db_setup-- that should try to connect to the db and verify that everything's working. If the command finishes, then Alexandria can talk to your install!","If everything ran correctly, you should see the following responses to your commands:","Install the pg_trgm extension on the default template database with the following command:","Local PostgreSQL Install","Make sure to end every command with a semicolon (;) AND press Enter when you're done to execute the command. The shell will print out the name of the command that you just ran (for example, after you run the first \"CREATE DATABASE\" command, it should print \"CREATE\") back into the console. That's how you know the command just ran. If you don't see that line, try typing a semicolon and pressing enter again; usually that line terminator just got misplaced.","Run make migrate to push the db schema and then finally make run to start Alexandria -- at this point you're off to the races!","Run the following commands in your new shell to configure the database:","Run the following commands to create the database information needed by Alexandria:","The first thing you'll need to do is install a new version of PostgreSQL that works for your operating system. After that's done, there's a little bit of setup that needs to happen.","This will make it so that the extension is always available, even for tests. Note: if this fails, you need to install postgresql-contrib. pg_trgm is NOT optional.","Unless you really need this or cannot use Docker, please use the method outlined in the regular Environment Setup.","We recommend the docker method over this one, as this will leave Postgres running locally on your machine after you're finished working with Alexandria and you may not want or need that. If you still want to run Postgres locally (and not involve Docker), then read on.","You don't need to do this if you take the recommended Docker route."]}],[{"l":"Contributing Documentation","p":["Documentation is the heart and soul of any project, and this documentation is no different. We strive for the highest level of accuracy, readability, and simplicity -- docs need to be easy to understand and easy to follow.","The pages in this section cover how to install Retype (the documentation engine we use), layouts for new pages, and guidelines for making new pages the best that they can be!","Installing Retype","Documentation Layout","Example Page","Documentation Best Practices"]}],[{"l":"Installing Retype"},{"l":"Introduction","p":["Our documentation is powered by Retype, a Javascript-based documentation generator. In this page, you will install Node Version Manager ( nvm), NodeJS and NPM, and finally Retype."]},{"l":"Prerequisites","p":["A desire to write great documentation!","A computer running MacOS or Ubuntu Linux"]},{"i":"installing-nodejs--npm","l":"Installing NodeJS + NPM","p":["We use a Javascript package called Retype to generate our documentation from markdown files located in the docs folder. In order to install Retype, we need to install nvm and NPM first.","Because NPM can be... tricky at best, we use nvm(Node Version Manager) to help us wrangle NodeJS and NPM. Install it with the following command:","Note: This may be out of date. Verify that this is the current version here.","Restart your shell so we can use the new changes:","Verify that nvm is available and can be called:","You should see something like the following:","Now that nvm is installed and accessible, install the latest version of NodeJS by running the following command:","Close your terminal and open a new terminal window to completely reset it.","Congrats! \uD83C\uDF89 NodeJS is now installed and we're ready to install and use Retype."]},{"i":"installing-retype-1","l":"Installing Retype","p":["To install Retype, run the following command:","After this completes, it should be immediately available for use. Verify by checking the version:","You should see something like this:"]},{"l":"Running the Docs Server","p":["Now that Retype is installed, you can run the Retype local server to compile the documentation and test it locally so that you can check your changes in real time:","The compiled and hosted documentation is available at http://localhost:5000/Alexandria/. The page will automatically reload when you save any .md file in the docs folder."]}],[{"l":"Documentation Layout"},{"l":"Introduction","p":["Retype uses the directory structure as a base for the sidebar and site layout. If you need to add a new page, just create a new markdown page inside the appropriate subfolder. For example, to create a file called test.md under the heading of Contributing, create the file at the following path: docs/contributing/test.md. It will automatically get picked up and displayed under the Contributing header!"]},{"l":"Header Block","p":["Every page needs to start with a brief block so Retype knows how to display it.","That's the header block from this very page! Here's what those keys do:","order: The order of the pages in the sidebar. Higher numbers are displayed higher in the list and are compared against the order keys in the other pages.","icon: Pick any icon from GitHub's icon list to use it as the icon on the sidebar. Click on the icon you like to get its name.","tags: Any searchable tags you want to apply to this page -- tags are searchable on the site, so use as many tags as you feel are necessary!","After that, there should be a few specific sections so that everyone understands what the page is for and what information we are trying to share."]},{"i":"introduction-1","l":"Introduction","p":["The introduction serves a very important purpose -- it tells the reader why they should read it! The introduction has a very specific layout:","one or two sentences that explain what the page is for","\"In this page, ...\" Explain exactly what the reader will do or what they will learn by reading this","For example:","\"In this page, you will install and configure pyenv, Python, and Poetry, the three tools you need to work on Alexandria on your computer.\"","In one sentence, we establish what we will learn on the page (\" pyenv, Python, and Poetry\"), what we are going to do with them (\"install and configure\"), and why we need to know this information (\"the three tools you need to work on Alexandria on your computer.\") By the end of the page, we have installed and configured the three programs."]},{"l":"Prerequisites","p":["The Prerequisites section should list every single external thing that a reader needs before following the page of documentation.","If we have to send the reader away from the docs to do something, we should only do it at the very beginning.","Everything else should be accomplished inside the docs.","In the Prerequisites, use bullet points (* or --- see the markdown spec for lists for more information) to list out every piece of technology or process that the reader needs to do, with exact links to documentation that explain how to achieve what should happen. For example:","Install X as described by steps one and two of this documentation","This third party software","A laptop computer with a fingerprint reader","Any prerequisites should be extremely clear and if it contains a link, make the link part of the actual requirement so that it's clear what the reader is clicking on. It's better to have the link span multiple words as shown above than to have something like:","This third party software ( click here)","If another page hosted here in the documentation is required as a prerequisite, link directly to that page using the !ref syntax:","It will render out to this:","Documentation Layout"]},{"l":"Rest of the Docs","p":["The rest of the document should be separated out into logical sections using the double ## to act as a \"level two\" header. There should only be one \"level one\" header -- the #-- and it should be at the very top of the page.","You can see a complete template, ready for copying and pasting, at the Example Page.","Documentation Layout"]}],[{"l":"Example Page","p":["Here's an example starter document you can copy and paste:","The available icon options can be found here.","Check out the Retype documentation to see all the great formatting options."]}],[{"l":"Best Practices"},{"l":"Introduction","p":["The best documentation is documentation that teaches without getting in your way. Some folks are better at it than others, which is why we take inspiration from DigitalOcean and their fantastic documentation and tutorials. In a talk at PyCon 2022, Mason Egger, a former member of the DigitalOcean Tutorials team, broke down exactly what makes their documentation so great. This page takes the principles discussed in the talk and on the slides and reproduces them in long form (with permission from the author)."]},{"l":"Best Practices in Documentation"},{"l":"Make Your End Goal Clear","p":["In the introduction section, explain exactly what the purpose of the page is and what the reader should accomplish by the time they are done.","you will install X","you will configure Y","Be concise; while it's fun to wax poetic about things sometimes, it should be immediately clear why the reader is here and why the page is here."]},{"i":"dont-be-overly-verbose","l":"Don't Be Overly Verbose","p":["Why waste time say lot word when few word do trick?","~ Kevin Malone (The Office (US))","Maybe don't go to quite such lengths (or lack thereof), but definitely do try to keep it short. There's no reason to write a book on something that should only take a few paragraphs to explain, so when writing about something, try and remove extra words that aren't necessary."]},{"l":"Aim for a Low Reading Level","p":["Not everyone has the same proficiency of language, especially folks who are reading as a second, third, or even fourth language. Try to not use complex words (like 'proficiency') and use external tooling to check the grade level of the text. Completed documentation should not go above the 6th grade level."]},{"l":"Use Inclusive Language","p":["Sometimes language can be accidentally exclusive if we're not careful of how it's applied. A great example of this is gendered language like 'he', 'she', or 'guys' -- it's much easier (and much more inclusive) to use 'they', 'them', or the second person 'you'.","Some common slang terms in tech (\"noob\", \"dummies\") can be derogatory and make people feel unwelcome to a project or to documentation, even if the documentation is meant to be welcoming (like the Idiot's Guide books, for example).","Words that can make people doubt their own skills, like 'easy' or 'simple', should also be avoided. What is simple to one person might be rocket science to another, and we never want someone to feel inferior while they're trying to learn. (Or ever, but you get my point.)"]},{"l":"Limit Technical Jargon","p":["jargon","Special words or expressions that are used by a particular profession or group and are difficult for others to understand.","~ Oxford Languages","Take a good look at any word that has special meaning in your industry -- 'unicorn', 'ideate', 'bleeding edge', 'sunset', and 'grok' are good examples in tech -- and strike it from your documentation. Newcomers unfamiliar with the intended meaning will feel alienated and unwelcome; because this specific documentation is intended for people with limited or no technical experience, any jargon should be avoided."]},{"l":"Define All Acronyms","p":["Ensure that every acronym has an easily accessible definition and that it is defined (or redefined) as many times as needed. Write the full name of the acronym the first time it's used, and don't be afraid to do it again later if it's possible that the reader could have skipped the first definition. For example, \"...using HTML (hypertext markup language) and CSS (cascading style sheets), we can...\".","Acronyms cannot usually be puzzled out by context clues alone. Definition can be done in either order (acronym first, then definition, or definition and then acronym) but it must be defined even if you expect everyone reading it to know what it means."]},{"i":"avoid-in-jokes-idioms-and-regional-language","l":"Avoid In-jokes, Idioms, and Regional Language","p":["Though some sentences may make sense to you, unless you're writing for people who live in your city, keep an eye out for language and idioms that might confuse people who either aren't from your area or are not as familiar with language. For example, in the midwest USA we may say that something \"needs doing\", but it might not be easy to translate that something needs to be done if they've never seen that expression before.","Other examples of regional slang from my corner of the world include 'schnookered' and the fact that \"sweeping\" and \"vacuuming\" are interchangeable. Don't ask me why; I don't know either."]},{"l":"Use Meaningful Examples and Variable Names","p":["When writing out examples, make sure they're actually relevant to the content that you're writing about and that they actually show what the code is supposed to do -- try to not make up examples just for the sake of having examples.","Ensure your variable names are relevant to the work that you're showing; foo and bar are... variables, yes, but they're not descriptive variables. What do they do? Why are they here? One can only guess. With variable names that are more descriptive, like person and person_name, then it's more clear what your example is trying to do."]},{"i":"dont-make-the-reader-leave-the-docs","l":"Don't Make the Reader Leave the Docs","p":["This point is discussed more thoroughly in the documentation layout section. Place everything that could make a reader leave (like things they need to do before they tackle whatever the page is about) in the very beginning so that they have a reason to come back. We don't want the reader to get distracted because they had to open a new tab halfway through a tutorial; everything after the beginning should be self-contained."]},{"l":"Make Content Scannable","p":["Break up the page into logically defined sections. If a reader is going to be looking for a specific piece of important information, put it in a section that clearly shows where it's located; someone who is not familiar with the docs should be able to scan the page to identify all the major pieces of information.","The search bar can help, but there's only so much that it can do; ensure that the sections can be used to quickly narrow down where something might be."]},{"i":"verify-the-documentation","l":"Verify the Documentation!","p":["Make sure it works. It's as simple as that. When writing out instructions, test as you go, then go back and verify that your instructions work. Setting up a virtual machine (VM) is a great way to test installation instructions and verify that there's nothing extra waiting to surprise newcomers; bad documentation or incomplete documentation is worse than no documentation at all."]},{"l":"Thanks","p":["Thanks to Mason Egger for allowing this retelling of his talk and slides. The original slides can be found here, and Mason is on Twitter at @masonegger."]}]]