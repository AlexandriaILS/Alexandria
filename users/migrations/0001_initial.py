# Generated by Django 3.1.5 on 2021-02-04 04:47

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import localflavor.us.models
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='USLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address_1', models.CharField(max_length=128, verbose_name='Address')),
                ('address_2', models.CharField(blank=True, max_length=128, verbose_name="Address cont'd")),
                ('city', models.CharField(default='Indianapolis', max_length=64, verbose_name='City')),
                ('state', localflavor.us.models.USStateField(default='IN', max_length=2)),
                ('zip_code', localflavor.us.models.USZipCodeField(default='46227', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='BranchLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150)),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.uslocation')),
            ],
        ),
        migrations.CreateModel(
            name='AlexandriaUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('card_number', models.IntegerField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_minor', models.BooleanField(default=False, help_text='Check if the person this account belongs to is legally considered a minor.')),
                ('birth_year', models.IntegerField(blank=True, help_text='If allowed, enter the year of birth for the patron. Helps differentiate between patrons with the same name.', verbose_name='birth year')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user is a library staff member.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.uslocation')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', users.models.AlexandriaUserManager()),
            ],
        ),
    ]
