{% load widget_tweaks %}
{% load i18n %}
{% load static %}
{% load string_helpers %}

{% if header %}
    <h1>{{ header }}</h1>
{% endif %}
{% if subheader %}
    <h4>{{ subheader }}</h4>
{% endif %}

{% if slim_form %}
    <div class="row">
    <div class="col-sm-0 col-md-2 col-lg-3"></div>
    <div class="col-sm-0 col-md-8 col-lg-6">
{% endif %}

{% block preface %}
{% endblock %}

<div class="mt-4"></div>
{% if messages %}
    {% for message in messages %}
        {% if message.level == DEFAULT_MESSAGE_LEVELS.ERROR %}
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% elif message.level == DEFAULT_MESSAGE_LEVELS.SUCCESS %}
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% else %}
            <div class="alert alert-dark alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endif %}
    {% endfor %}
{% endif %}

{% if header_js_buttons or header_link_buttons %}
    <div class="row">
        {% for item in header_js_buttons %}
            <div class="col mt-2">
                <button class="btn btn-info btn-block"
                        onclick="{{ item.onclick }}">{{ item.text }}</button>
            </div>
        {% endfor %}
        {% for item in header_link_buttons %}
            <div class="col mt-2">
                <a href="{% url 'item.reverse_url' %}"
                   class="btn btn-info btn-block">{{ item.text }}</a>
            </div>
        {% endfor %}
    </div>
{% endif %}

{# Lifted from https://simpleisbetterthancomplex.com/article/2017/08/19/how-to-render-django-form-manually.html#}
{% if form.is_multipart %}
    {# properly handle the file uploads #}
    <form novalidate enctype="multipart/form-data" method="post" action="">
{% else %}
    <form novalidate method="post" action="">
{% endif %}
<div class="errorMessages"></div>
{% csrf_token %}
{% for hidden_field in form.hidden_fields %}
    {{ hidden_field }}
{% endfor %}

{% if form.non_field_errors %}
    <div class="alert alert-danger" role="alert">
        {% for error in form.non_field_errors %}
            {{ error }}
        {% endfor %}
    </div>
{% endif %}

{% for field in form.visible_fields %}
    <div class="mt-3">
        {% if form.is_bound %}
            {% if field.errors %}
                {% render_field field class="form-control is-invalid" %}
                {% for error in field.errors %}
                    <div class="invalid-feedback">
                        {{ error|safe }}
                    </div>
                {% endfor %}
            {% else %}
                {{ field.label_tag }}
                {% render_field field class="form-control is-valid" %}
            {% endif %}
        {% else %}
            {% if field.field.widget.input_type == 'file' %}
                {{ field.label_tag }}
                <div class="btn-group-toggle">
                    <label for="{{ field.auto_id }}"
                           class="form-control-file btn btn-secondary">browse</label>
                    {% render_field field class="inputfile" style="visibility:hidden;margin-top:-30px" %}
                </div>
            {% elif field.field.widget.input_type == 'checkbox' and not field.field.widget.choices %}
                {# this is a normal checkbox and not a MultipleChoiceField #}
                <div class="form-check form-switch">
                    {{ field.label_tag|trim_label:1 }}
                    {% render_field field class="form-check-input" %}
                </div>
            {% elif field.field.widget.input_type == 'checkbox' and field.field.widget.choices %}
                {# This is a MultipleChoiceField #}
                {# This is specifically written for permissions #}
                {{ field.label_tag|trim_label:1 }}:
                {% if multiwidgetdefaults %}
                    <div class="ms-3 mt-3">{% translate "Defaults" %}:</div>
                    {# this should be a dict like this: {nameofbutton: [list, of, ids]} #}
                    <div class="container">
                        <div class="row">
                            {% for key, value in multiwidgetdefaults.items %}
                                <div class="col-12 col-sm-6 col-md-4 col-xxl-2">
                                    <div class="d-grid mt-2">
                                        <div class="btn btn-outline-secondary setDefaultButton"
                                             onclick="setDefaults(this)"
                                             data-values="{{ value }}">{{ key }}</div>
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endif %}

                {% regroup field.field.widget.choices by 0.instance.content_type.app_label as sorted_options %}
                {% for group in sorted_options %}
                    <div class="ms-3 mt-3">{{ group.grouper|title }}:</div>
                    <div class="row">
                        {% for perm in group.list %}
                            <div class="col-12 col-lg-6 col-xxl-4 mt-2">
                                <div class="form-check form-switch">
                                    <div class="form-check form-switch">
                                        <label for="id_{{ perm.0.value }}">{{ perm.0.instance.name }}</label>
                                        <input type="checkbox"
                                               name="{{ perm.0.instance.codename }}"
                                               class="form-check-input multi-check"
                                               id="id_{{ perm.0.value }}"
                                               {% if perm.0.instance in field.field.initial %}checked{% endif %}>
                                    </div>
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                    <div class="container">
                        <hr>
                    </div>
                {% endfor %}
            {% elif field.widget_type == "select" %}
                {{ field.label_tag }}
                {% render_field field class="form-select" %}
            {% else %}
                {{ field.label_tag }}
                {% render_field field class="form-control" %}
            {% endif %}
        {% endif %}

        {% if field.help_text %}
            <small class="form-text text-muted">{{ field.help_text }}</small>
        {% endif %}
    </div>
{% endfor %}
{% if show_password_reset %}
    {% if not request.user.is_authenticated %}
        <a class="text-muted"
           href="{% url 'password_reset' %}">{% translate "Forgot your password? Click here!" %}</a>
    {% else %}
        <div class="mt-3">
            <div class="row">
                <div class="col-1 col-md-2 col-lg-3"></div>
                <div class="col-10 col-md-8 col-lg-6 text-center">
                    <div class="d-grid">
                        <a href="{% url 'password_change' %}" class="btn btn-outline-danger">
                            {% translate "Change Password" %}
                        </a>
                    </div>
                </div>
                <div class="col-1 col-md-2 col-lg-3"></div>
            </div>
        </div>
    {% endif %}
{% endif %}

<div class="row mt-3">
    <div class="col-md-1 col-lg-2"></div>
    <div class="col-md-10 col-lg-8">
        <div class="d-grid gap-1">
            <button type="submit" class="btn btn-primary mt-3">Submit</button>
        </div>
    </div>
    <div class="col-md-1 col-lg-2"></div>
</div>
</form>
{% if slim_form %}
    </div>
    <div class="col-sm-0 col-md-2 col-lg-3"></div>
    </div>
{% endif %}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        document.querySelectorAll('.inputfile').forEach(function (input) {
            let label = input.previousElementSibling

            input.addEventListener('change', function (e) {
                let fileName = '';

                fileName = e.target.value.split('\\').pop();

                label.innerText = fileName ? fileName : "browse";
            });
        });

        // Adapted from https://www.tjvantoll.com/2012/08/05/html5-form-validation-showing-all-error-messages/
        document.querySelectorAll("form").forEach(function (form) {
            const errorList = form.querySelector(".errorMessages");

            if (errorList) {
                const showAllErrorMessages = function () {
                    errorList.textContent = "";

                    // Find all invalid fields within the form.
                    form.querySelectorAll(":invalid").forEach(function (node) {
                        // Find the field's corresponding label
                        const label = form.querySelector(`label[for="${node.id}"]`);
                        // Opera incorrectly does not fill the validationMessage property.
                        const message = node.validationMessage || 'Invalid value.';

                        if (!errorList.classList.contains("mt-3")) {
                            errorList.classList.add("mt-3");
                        }

                        // Add the error message to the list
                        const errorMessage = document.createElement("span");
                        errorMessage.innerText = " " + message;

                        const errorElement = document.createElement("div");
                        errorElement.classList.add("alert");
                        errorElement.classList.add("alert-danger");
                        errorElement.role = "alert";
                        if (label) {
                            errorElement.appendChild(label.cloneNode(true));
                        }
                        errorElement.appendChild(errorMessage);

                        errorList.appendChild(errorElement);
                    });
                };

                // Support Safari
                form.addEventListener("submit", function (event) {
                    if (this.checkValidity && !this.checkValidity()) {
                        const firstInvalid = form.querySelector(":invalid");
                        if (firstInvalid) {
                            firstInvalid.focus();
                        }
                        event.preventDefault();
                    }
                });

                const submitButton = form.querySelector("input[type=submit], button:not([type=button])");
                if (submitButton) {
                    submitButton.addEventListener("click", showAllErrorMessages);
                }

                form.querySelectorAll("input").forEach(function (inputElem) {
                    inputElem.addEventListener("keypress", function (event) {
                        const checkedTypes = ["date", "email", "month", "number", "search", "tel", "text", "time", "url", "week"]
                        if (checkedTypes.includes(inputElem.type)
                            && event.code === "Enter") {
                            showAllErrorMessages();
                        }
                    });
                });
            }
        });
    })

    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async function setDefaults(el) {
        const values = JSON.parse(el.dataset.values);
        const elements = Array.from(document.getElementsByClassName('multi-check'));

        for (const element of elements) {
            // stutter changing the checkboxes just enough to be noticeable.
            // Thanks to @adampleaseclap for the inspiration of this cute addition
            if (Math.random() > 0.5){
                // the actual act of creating the promise and resolving is enough delay
                await sleep(0);
            }
            if (values.includes(parseInt(element.id.split('id_')[1]))) {
                element.setAttribute('checked', '')
            } else {
                element.removeAttribute('checked')
            }
        }
    }
</script>

{% if enable_trumbowyg %}
    {# base #}
    <script src="{% static 'vendored/js/jquery-3.6.0.min.js' %}"></script>
    <link rel="stylesheet" href="{% static "js/trumbowyg/ui/trumbowyg.min.css" %}">
    <script src="{% static "js/trumbowyg/trumbowyg.min.js" %}"></script>

    {# code highlight plugin dependency #}
    <script src="{% static "js/prism_js/prism.js" %}"></script>
    <link href="{% static "js/prism_js/prism-tomorrow-night.css" %}" rel="stylesheet">

    {# load code highlight plugin #}
    <script src="{% static "js/trumbowyg/plugins/highlight/trumbowyg.highlight.min.js" %}"></script>
    <link rel="stylesheet" href="{% static "js/trumbowyg/plugins/highlight/ui/trumbowyg.highlight.min.css" %}">

    <script>
        $('#{{trumbowyg_target}}').trumbowyg(
            {
                btns: [
                    ['viewHTML'],
                    ['undo', 'redo'], // Only supported in Blink browsers
                    ['formatting'],
                    ['strong', 'em', 'del'],
                    ['superscript', 'subscript'],
                    ['link'],
                    ['insertImage'],
                    ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],
                    ['unorderedList', 'orderedList'],
                    ['horizontalRule'],
                    ['removeformat'],
                    ['fullscreen'],
                    ['highlight'],
                ],
                semantic: false  // disable importing <div> as <p>
            }
        );
    </script>
{% endif %}
